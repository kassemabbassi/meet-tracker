// Gmail API service for sending MoM emails
export interface EmailData {
  to: string
  subject: string
  htmlContent: string
  textContent?: string
}

export const gmailService = {
  // Send email using Gmail API
  async sendEmail(emailData: EmailData): Promise<boolean> {
    try {
      const response = await fetch("/api/send-email", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(emailData),
      })

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }

      const result = await response.json()
      return result.success
    } catch (error) {
      console.error("Error sending email:", error)
      return false
    }
  },

  // Generate MoM email content
  generateMomEmailContent(
    meetingName: string,
    meetingDate: string,
    notes: any[],
    participants: any[],
    isPersonalized = false,
    recipientEmail?: string,
  ): { html: string; text: string } {
    const filteredNotes = isPersonalized ? notes.filter((note) => note.assigned_to_email === recipientEmail) : notes

    const html = `
      <!DOCTYPE html>
      <html>
        <head>
          <meta charset="utf-8">
          <style>
            body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; line-height: 1.6; color: #333; }
            .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }
            .content { padding: 30px; background: #f8f9fa; }
            .section { margin-bottom: 30px; background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
            .note-item { margin-bottom: 15px; padding: 15px; border-left: 4px solid #667eea; background: #f8f9ff; }
            .action-item { border-left-color: #e74c3c; background: #fff5f5; }
            .objective-item { border-left-color: #f39c12; background: #fffbf0; }
            .decision-item { border-left-color: #27ae60; background: #f0fff4; }
            .priority-high { border-left-color: #e74c3c; }
            .priority-urgent { border-left-color: #8e44ad; }
            .participants-list { display: flex; flex-wrap: wrap; gap: 10px; }
            .participant-badge { background: #667eea; color: white; padding: 5px 12px; border-radius: 20px; font-size: 14px; }
            .footer { text-align: center; padding: 20px; color: #666; font-size: 14px; }
          </style>
        </head>
        <body>
          <div class="header">
            <h1>${isPersonalized ? "Your Action Items" : "Minutes of Meeting"}</h1>
            <h2>${meetingName}</h2>
            <p>${new Date(meetingDate).toLocaleDateString("en-US", {
              weekday: "long",
              year: "numeric",
              month: "long",
              day: "numeric",
            })}</p>
          </div>
          
          <div class="content">
            ${
              !isPersonalized
                ? `
            <div class="section">
              <h3>üìã Meeting Participants</h3>
              <div class="participants-list">
                ${participants.map((p) => `<span class="participant-badge">${p.name}</span>`).join("")}
              </div>
            </div>
            `
                : ""
            }
            
            ${filteredNotes
              .map((note) => {
                const typeClass = `${note.note_type}-item`
                const priorityClass = note.priority !== "medium" ? `priority-${note.priority}` : ""
                const icon = {
                  general: "üìù",
                  action: "‚ö°",
                  objective: "üéØ",
                  decision: "‚úÖ",
                  issue: "‚ö†Ô∏è",
                }[note.note_type]

                return `
                <div class="section">
                  <div class="note-item ${typeClass} ${priorityClass}">
                    <h4>${icon} ${note.note_type.charAt(0).toUpperCase() + note.note_type.slice(1)}</h4>
                    <p>${note.content}</p>
                    ${
                      note.assigned_to_name
                        ? `<p><strong>Assigned to:</strong> ${note.assigned_to_name} (${note.assigned_to_email})</p>`
                        : ""
                    }
                    ${note.due_date ? `<p><strong>Due Date:</strong> ${new Date(note.due_date).toLocaleDateString()}</p>` : ""}
                    ${note.priority !== "medium" ? `<p><strong>Priority:</strong> ${note.priority.toUpperCase()}</p>` : ""}
                  </div>
                </div>
                `
              })
              .join("")}
          </div>
          
          <div class="footer">
            <p>Generated by Chkoun Hadher - Professional Meeting Tracker</p>
            <p>This email was automatically generated from your meeting notes.</p>
          </div>
        </body>
      </html>
    `

    const text = `
Minutes of Meeting: ${meetingName}
Date: ${new Date(meetingDate).toLocaleDateString()}

${!isPersonalized ? `Participants: ${participants.map((p) => p.name).join(", ")}\n\n` : ""}

${filteredNotes
  .map((note) => {
    let noteText = `${note.note_type.toUpperCase()}: ${note.content}`
    if (note.assigned_to_name) noteText += `\nAssigned to: ${note.assigned_to_name} (${note.assigned_to_email})`
    if (note.due_date) noteText += `\nDue Date: ${new Date(note.due_date).toLocaleDateString()}`
    if (note.priority !== "medium") noteText += `\nPriority: ${note.priority.toUpperCase()}`
    return noteText
  })
  .join("\n\n")}

---
Generated by Chkoun Hadher - Professional Meeting Tracker
    `

    return { html, text }
  },
}
